(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{408:function(n,_,v){"use strict";v.r(_);var e={},t=v(12),component=Object(t.a)(e,(function(){var n=this,_=n.$createElement;n._self._c;return n._m(0)}),[function(){var n=this,_=n.$createElement,v=n._self._c||_;return v("div",[v("h1",[n._v("数据结构和算法模块")]),n._v(" "),v("p",[n._v("数据结构（英语：data structure）是计算机中存储、组织数据的方式。")]),n._v(" "),v("p",[n._v("\n        数据结构是一种具有一定逻辑关系，在计算机中应用某种存储结构，并且封装了相应操作的数据元素集合。它包含三方面的内容，逻辑关系、存储关系及操作。\n    ")]),n._v(" "),v("p",[n._v("\n        不同种类的数据结构适合于不同种类的应用，而部分甚至专门用于特定的作业任务。例如，计算机网络依赖于路由表运作，B\n        树高度适用于数据库的封装。\n    ")]),n._v(" "),v("h1",[n._v("为什么要学习数据结构和算法？")]),n._v(" "),v("p",[n._v("\n        随着应用程序变得越来越复杂和数据越来越丰富，几百万、几十亿甚至几百亿的数据就会出现，而对这么大对数据进行搜索、插入或者排序等的操作就越来越慢，数据结构就是用来解决这些问题的。\n    ")]),n._v(" "),v("h1",[n._v("常见的数据结构")]),n._v(" "),v("ul",[v("li",[n._v("栈（Stack）：栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。")]),n._v(" "),v("li",[n._v("\n            队列（Queue）：队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。\n        ")]),n._v(" "),v("li",[n._v("数组（Array）：数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。")]),n._v(" "),v("li",[n._v("\n            链表（Linked\n            List）：链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。\n        ")]),n._v(" "),v("li",[n._v("树（Tree）：树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。")]),n._v(" "),v("li",[n._v("图（Graph）：图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。")]),n._v(" "),v("li",[n._v("堆（Heap）：堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。")]),n._v(" "),v("li",[n._v("\n            散列表（Hash table）：散列表源自于散列函数(Hash\n            function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录。\n        ")])])])}],!1,null,"e1e092c8",null);_.default=component.exports}}]);